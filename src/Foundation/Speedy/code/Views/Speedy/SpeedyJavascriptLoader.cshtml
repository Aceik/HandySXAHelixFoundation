@using Sitecore.Foundation.Speedy.Model
@using Sitecore.Foundation.Speedy.Speedy

@{
    SpeedyLayoutModel model = SpeedyAssetLinksGenerator.GetSpeedyLayoutModel();
    var assetLinks = (SpeedyAssetLinks)model.AssetLinks;
}

<script>
    @Html.Raw(assetLinks.ClientScriptsRendered)
    var Speedy = {
        variables: {
            src : null,
            script: null,
            pendingScripts : [],
            firstScript: function () { return document.scripts[0] },
            firstRunCompleted: false
        },
        init: function () {
			Speedy.variables.firstRunCompleted = Speedy.tools.checkCookie(Speedy.settings.cookieName);
            if(Speedy.settings.jsDeferLoadForMilliseconds > 0)
                Speedy.fallbackExperienceBeforeLoad();
            if (Speedy.variables.firstRunCompleted && Speedy.settings.isFirstPassOnlyCookieEnabled) {
				Speedy.dynamicLoad();
            } else {
                // Defer load a bit longer with a fallback experience
                window.setTimeout(Speedy.dynamicLoad, Speedy.settings.jsDeferLoadForMilliseconds);
                Speedy.tools.setCookie(Speedy.settings.cookieName, true, Speedy.settings.cookieExpiration);
            }
        },
        dynamicLoad: function () {
            // loop through our script urls
            while (Speedy.variables.src = clientScripts.shift()) {
                if ('async' in Speedy.variables.firstScript()) { // modern browsers
                    Speedy.variables.script = document.createElement('script');
                    Speedy.variables.script.async = false;
                    Speedy.variables.script.src = Speedy.variables.src;
                    document.head.appendChild(Speedy.variables.script);
                }
                else if (Speedy.variables.firstScript().readyState) { // IE<10
                    // create a script and add it to our todo pile
                    Speedy.variables.script = document.createElement('script');
                    Speedy.variables.pendingScripts.push(script);
                    // listen for state changes
                    Speedy.variables.script.onreadystatechange = Speedy.events.stateChange;
                    // must set src AFTER adding onreadystatechange listener
                    // else we’ll miss the loaded event for cached scripts
                    Speedy.variables.script.src = Speedy.variables.src;
                    console.log("readyState")
                }
                else { // fall back to defer
                    document.write('<script src="' + Speedy.variables.src + '" defer></' + 'script>');
                }
            }

			Speedy.fallbackExperienceAfterLoad();
        },
        events: {
            stateChange: function() {
                // Execute as many scripts in order as we can
                var pendingScript;
                while (Speedy.variables.pendingScripts[0] && Speedy.variables.pendingScripts[0].readyState == 'loaded') {
                    pendingScript = Speedy.variables.pendingScripts.shift();
                    // avoid future loading events from this script (eg, if src changes)
                    pendingScript.onreadystatechange = null;
                    // can't just appendChild, old IE bug if element isn't closed
                    Speedy.variables.firstScript().parentNode.insertBefore(pendingScript, Speedy.variables.firstScript());
                }
            }
        },
        fallbackExperienceAfterLoad: null,
        fallbackExperienceBeforeLoad: null,
        tools: {
            setCookie: function (cname, cvalue, exdays) {
                var d = new Date();
                d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
                var expires = "expires=" + d.toUTCString();
                document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
            },
            getCookie: function (cname) {
                var name = cname + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) == 0) {
                        return c.substring(name.length, c.length);
                    }
                }
                return "";
            },
            checkCookie: function (name) {
                var user = Speedy.tools.getCookie(name);
                if (user != "") {
                    return true;
                } else {
                    return false;
                }
            },
            runSelector: function (value, displayValue) {
                var el = document.querySelectorAll(value);
                if (el)
                    el.forEach(function (item) {
                        item.style.display = displayValue;
                    });
            }
        }
    };

    @Html.Partial("/Views/Speedy/SpeedyJavascriptLoaderSettings.cshtml")

    Speedy.fallbackExperienceBeforeLoad = function () {
		setTimeout(function () {

            Speedy.tools.runSelector(Speedy.settings.fallbackHideSelector.display_unset.selector, 'none');

            if (Speedy.settings.fallbackHideSelector.display_block.selector)
                Speedy.tools.runSelector(Speedy.settings.fallbackHideSelector.display_block.selector, 'none');

		}, 100);
    };

    Speedy.fallbackExperienceAfterLoad = function () {
		console.log("after load");
        setTimeout(function () {
            Speedy.tools.runSelector(Speedy.settings.fallbackHideSelector.display_unset.selector, 'unset');
            if (Speedy.settings.fallbackHideSelector.display_block.selector)
                Speedy.tools.runSelector(Speedy.settings.fallbackHideSelector.display_block.selector, 'block');

			if(typeof(Lazy) != 'undefined' && Lazy && Lazy.lazyLoading) {
				Lazy.lazyLoading.prepareNavigationImages();
            }
            Speedy.settings.fallBackExperienceComplete = true;
		}, Speedy.settings.fallBackExperienceDelay);
    };

    Speedy.init();

    @Html.Raw(model.VanillaJavasript)
</script>
